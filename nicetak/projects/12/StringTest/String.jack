// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int length, capacity;
    field Array arrString;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let arrString = Array.new(maxLength);
        }

        let length = 0;
        let capacity = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(arrString = 0)) {
            do arrString.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return arrString[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let arrString[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let arrString[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        let arrString[length] = 0;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, i;
        var boolean isNegative;

        let value = 0;
        let i = 0;
        let isNegative = false;

        if (charAt(0) = 45) {
            let isNegative = true;
            let i = i + 1;
        }

        while (i < length) {
            let value = (charAt(i) - 48) + (value * 10);
            let i = i + 1;
        }

        if (isNegative) {
            let value = -value;
        }

        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if (val = 0) {
            do appendChar(48);
            return;
        }

        if (val < 0) {
            do appendChar(45);
        }

        let val = Math.abs(val);
        do setIntInternal(val);

        return;
    }

    method void setIntInternal(int val) {
        var int digit, tenth;

        if (val = 0) {
            return;
        }

        let tenth = val / 10;
        let digit = val - (tenth * 10);
        let val = tenth;
        do setIntInternal(val);
        do appendChar(digit + 48);

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
