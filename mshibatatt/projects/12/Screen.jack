// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int color; 
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let color = 1;
        
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384; // -2^15 (?)
        
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address;
        let address = 16384;
        while (address < 24576) {
            do Memory.poke(address, 0);
            let address = address + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) {
            let color = 1;
        } else {
            let color = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bit, word;
        let word = x / 16;
        let address = 16384 + (y * 32) + word;
        let bit = x - (word * 16);
        if (color = 1) {
            do Memory.poke(address, (twoToThe[bit] | Memory.peek(address)));
        } else {
            do Memory.poke(address, (~twoToThe[bit] & Memory.peek(address)));
        }
        
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, adyMinusbdx;
        var boolean is_down;
        
        if (y1 = y2) {
            let x = Math.min(x1, x2);
            let dx = Math.max(x1, x2) - x;
            let a = 0;
            while (~(a > dx)) {
                do Screen.drawPixel(x + a, y1);
                let a = a + 1;
            }
            return;
        }

        if (x1 < x2) {
            let x = x1;
            let dx = x2 - x1;
            let y = y1;
            let dy = y2 - y1;
        } else {
            let x = x2;
            let dx = x1 - x2;
            let y = y2;
            let dy = y1 - y2; 
        }
        
        if (dy < 0) {
            let is_down = true;
            let dy = -dy;
        } else {
            let is_down = false;
        }

        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;
        while (~(a > dx) & ~(b > dy)) {
            if (is_down) {
                do Screen.drawPixel(x + a, y - b);
            } else {
                do Screen.drawPixel(x + a, y + b);
            }
            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy; 
            } else {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y, start, end;
        let start = Math.min(y1, y2);
        let end = Math.max(y1, y2);
        let y = start;
        while (~(y > end)){
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx;
        
        let r = Math.min(r, 181);
        let dy = -r;
        while (~(dy > r)) {
            let dx = Math.sqrt(r*r - (dy*dy));
            do Screen.drawLine(x-dx, y+dy, x+dx, y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
