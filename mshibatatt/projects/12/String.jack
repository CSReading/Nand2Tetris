// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field String s;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        if (maxLength > 0) {
            let s = Array.new(maxLength);
        }
        
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        let length = 0;
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let s[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let s[length] = c;
        let length = length + 1; 
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1; 
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int v, j, output;
        var boolean is_negative;

        let is_negative = false;
        let output = 0;
        let j = 0;
        let v = s[0];
        
        while ((((v > 47) & (v < 58)) | (v = 45)) & (j < length)) {
            if (v = 45) {
                let is_negative = true;
            } else {
                let v = v - 48; // convert into int value
                let output = output * 10 + v;
            }
            let j = j + 1;
            let v = s[j];
        }

        if (is_negative){
            return -output;
        } else {
            return output;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int d, v;
        var char c;
        var boolean is_negative;
        
        while (length > 0) {
            do eraseLastChar();
        }

        if (val < 0) {
            let is_negative = true;
        } else {
            let is_negative = false;
        }

        let v = val / 10;
        let d = val - (10 * v); 
        let c = (Math.abs(d) + 48); // convert into char
        if (Math.abs(val) < 10) {
            if (is_negative) {
                do appendChar(45);
            }
            do appendChar(c);
        } else {
            do setInt(v);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
