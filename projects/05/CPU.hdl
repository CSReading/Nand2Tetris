// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // C命令のときに新しい命令を使用する
    Mux16(a=instruction, b=prevALUtoMux, sel=instruction[15], out=outMux1);

    // A命令、もしくはC命令でAレジスタへの書き込み司令があったときにAレジスタに書き込みを行う
    Not(in=instruction[15], out=isA);
    Or(a=isA, b=instruction[5], out=writeA);
    ARegister(in=outMux1, load=writeA, out=outAtoMux, out=outAtoPC, out[0..14]=addressM);

    // C命令かつMレジスタへの書き込み司令があったときにCレジスタに書き込みを行う
    And(a=instruction[15], b=instruction[3], out=writeM);

    // aビットによってAレジスタの値かメモリ入力かどちらをしようするか決める
    Mux16(a=outAtoMux, b=inM, sel=instruction[12], out=outMuxtoALU);

    // ALUの計算
    ALU(x=outD, y=outMuxtoALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=prevALUtoD, out=prevALUtoMux, zr=outzr, ng=outng);

    // C命令かつDレジスタへの書き込みが司令があったときにDレジスタに書き込みを行う
    And(a=instruction[15], b=instruction[4], out=writeD);
    DRegister(in=prevALUtoD, load=writeD, out=outD);

    // ジャンプするかの判定
    And(a=outzr, b=instruction[1], out=tmp1);
    And(a=outng, b=instruction[2], out=tmp2);
    Or(a=outzr, b=outng, out=tmp3);
    Not(in=tmp3, out=tmp4);
    And(a=tmp4, b=instruction[0], out=tmp5);
    Or(a=tmp1, b=tmp2, out=tmp6);
    Or(a=tmp5, b=tmp6, out=tmp7);
    And(a=tmp7, b=instruction[15], out=jump);

    // ジャンプするならジャンプ、しないならインクリメント、リセット司令があればリセット
    PC(in=outAtoPC, load=jump, inc=true, reset=reset, out[0..14]=pc);
}